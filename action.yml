name: 'Loco Translations'
description: 'Download and update translations from Loco. Creates Pull Request with changes.'
inputs:
  locoExportKey:
    description: 'Loco Export Key'
    required: true
  langs:
    description: 'Languages to download'
    required: true
  format:
    description: 'Format of the translations'
    required: true
  translationsFolder:
    description: 'Folder to store translations'
    required: true
  mainBranch:
    description: 'Main branch'
    required: false
    default: 'main'
  reviewer:
    description: 'Reviewer for the PR'
    required: false
  draft:
    description: 'Create PR as draft'
    required: false
    default: 'false'
  automerge:
    description: 'Automerge PR'
    required: false
    default: 'false'
  app-id:
    description: 'GitHub App ID'
    required: true
  private-key:
    description: 'GitHub App Private Key'
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ inputs.app-id }}
        private-key: ${{ inputs.private-key }}

    - name: Get GitHub App User ID
      id: get-user-id
      run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
      shell: bash
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}

    - name: Configure GitHub App User ID
      run: |
        git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
        git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'
      shell: bash

    - name: Translations PR Check
      id: pr_check
      run: ${{ github.action_path }}/scripts/TranslationsPRCheck.ps1
      env:
        mainBranch: ${{ inputs.mainBranch }}
        repositoryId: ${{ github.repository }}
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
      shell: pwsh
    
    - name: Checkout to existing translations branch
      if : ${{ steps.pr_check.outputs.createPullRequest == 'false' }}
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.pr_check.outputs.translationsBranch }}
        token: ${{ steps.app-token.outputs.token }}
    
    - name: Checkout to the main branch
      if : ${{ steps.pr_check.outputs.createPullRequest == 'true' }}
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.pr_check.outputs.sourceBranch }}
        token: ${{ steps.app-token.outputs.token }}

    - name: Checkout to new translations branch
      if : ${{ steps.pr_check.outputs.createPullRequest == 'true' }}
      run: git checkout -b $translationsBranch
      env:
        translationsBranch: ${{ steps.pr_check.outputs.translationsBranch }}
      shell: bash

    - name: Translations Download
      run: ${{ github.action_path }}/scripts/TranslationsDownload.ps1
      env:
        locoExportKey: ${{ inputs.locoExportKey }}
        tmpFolder: ${{ runner.temp }}/tmp_translations
        langs: ${{ inputs.langs }}
        format: ${{ inputs.format }}
      shell: pwsh
      
    - name: Translations Apply
      id: translations_check
      run: ${{ github.action_path }}/scripts/TranslationsApply.ps1
      env:
        tmpFolder: ${{ runner.temp }}/tmp_translations
        targetFolder: ${{ github.workspace }}/${{ inputs.translationsFolder }}
      shell: pwsh
      
    - name: Translations Push
      if : ${{ steps.translations_check.outputs.changesDetected == 'true' }}
      run: ${{ github.action_path }}/scripts/TranslationsPush.ps1
      env:
        sourceBranch: ${{ steps.pr_check.outputs.sourceBranch }}
        translationsBranch: ${{ steps.pr_check.outputs.translationsBranch }}
        changesDetected: ${{ steps.translations_check.outputs.changesDetected }}
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
      shell: pwsh
      
    - name: Translations PR Create
      if : ${{ steps.pr_check.outputs.createPullRequest == 'true' && steps.translations_check.outputs.changesDetected == 'true' }}
      run: ${{ github.action_path }}/scripts/TranslationsPRCreate.ps1
      env:
        sourceBranch: ${{ steps.pr_check.outputs.sourceBranch }}
        translationsBranch: ${{ steps.pr_check.outputs.translationsBranch }}
        createPullRequest: ${{ steps.pr_check.outputs.createPullRequest }}
        repositoryId: ${{ github.repository }}
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        reviewer: ${{ inputs.reviewer }}
        draft: ${{inputs.draft}}
        automerge: ${{inputs.automerge}}
      shell: pwsh

    - name: Cleanup
      if: always()
      run: ${{ github.action_path }}/scripts/FolderCleanup.ps1
      env:
        folderPath: ${{ github.workspace }}
      shell: pwsh
